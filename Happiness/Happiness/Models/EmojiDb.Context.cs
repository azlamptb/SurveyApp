//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Happiness.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Core.Objects.DataClasses;
    using System.Linq;
    
    public partial class EmojidbEntities : DbContext
    {
        public EmojidbEntities()
            : base("name=EmojidbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<tbl_survey> tbl_survey { get; set; }
    
        public virtual ObjectResult<GetHappyindexSummary_Result> GetHappyindexSummary(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHappyindexSummary_Result>("GetHappyindexSummary", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<GetSurveyChild_Result> GetSurveyChild()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyChild_Result>("GetSurveyChild");
        }
    
        public virtual ObjectResult<GetSurveyFormail_Result> GetSurveyFormail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSurveyFormail_Result>("GetSurveyFormail");
        }
    
        public virtual ObjectResult<ReportMails_Result> ReportMails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportMails_Result>("ReportMails");
        }
    
        public virtual int GetsummaryLineChartMonth(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetsummaryLineChartMonth", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<GetHappyindexDatewiseLinechart_Result> GetHappyindexDatewiseLinechart(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<long> reportAuth)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var reportAuthParameter = reportAuth.HasValue ?
                new ObjectParameter("reportAuth", reportAuth) :
                new ObjectParameter("reportAuth", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHappyindexDatewiseLinechart_Result>("GetHappyindexDatewiseLinechart", fromdateParameter, todateParameter, reportAuthParameter);
        }
    
        public virtual ObjectResult<GetHappyindexdetailedwithdate_Result> GetHappyindexdetailedwithdate(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, string employeeCode, Nullable<long> reportAuth)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var reportAuthParameter = reportAuth.HasValue ?
                new ObjectParameter("reportAuth", reportAuth) :
                new ObjectParameter("reportAuth", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHappyindexdetailedwithdate_Result>("GetHappyindexdetailedwithdate", fromdateParameter, todateParameter, employeeCodeParameter, reportAuthParameter);
        }
    
        public virtual ObjectResult<GetHappyindexMonthly_Result> GetHappyindexMonthly(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<long> reportAuth)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var reportAuthParameter = reportAuth.HasValue ?
                new ObjectParameter("reportAuth", reportAuth) :
                new ObjectParameter("reportAuth", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHappyindexMonthly_Result>("GetHappyindexMonthly", fromdateParameter, todateParameter, reportAuthParameter);
        }
    
        public virtual ObjectResult<GetQustionir_Result> GetQustionir(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<long> reportAuth)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var reportAuthParameter = reportAuth.HasValue ?
                new ObjectParameter("reportAuth", reportAuth) :
                new ObjectParameter("reportAuth", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetQustionir_Result>("GetQustionir", fromdateParameter, todateParameter, reportAuthParameter);
        }
    }
}
